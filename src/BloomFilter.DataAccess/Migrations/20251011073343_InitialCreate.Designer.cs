// <auto-generated />
using System;
using BloomFilter.DataAccess.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BloomFilter.DataAccess.Migrations
{
    [DbContext(typeof(BloomFilterDbContext))]
    [Migration("20251011073343_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BloomFilter.Entity.Concrete.BloomFilterData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("BitArray")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ElementCount")
                        .HasColumnType("integer");

                    b.Property<double>("ExpectedFalsePositiveRate")
                        .HasColumnType("double precision");

                    b.Property<string>("FilterName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("FilterSize")
                        .HasColumnType("integer");

                    b.Property<int>("HashFunctionCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FilterName")
                        .IsUnique();

                    b.ToTable("BloomFilterDatas");
                });

            modelBuilder.Entity("BloomFilter.Entity.Concrete.SuspiciousDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastReportedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReportCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DomainName")
                        .IsUnique();

                    b.ToTable("SuspiciousDomains");
                });

            modelBuilder.Entity("BloomFilter.Entity.Concrete.SuspiciousEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastReportedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReportCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DomainName");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("SuspiciousEmails");
                });

            modelBuilder.Entity("BloomFilter.Entity.Concrete.UserReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ReportType")
                        .HasColumnType("integer");

                    b.Property<string>("ReportedValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReporterEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReporterIpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReporterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("SuspiciousDomainId")
                        .HasColumnType("integer");

                    b.Property<int?>("SuspiciousEmailId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("ReportType");

                    b.HasIndex("ReportedValue");

                    b.HasIndex("Status");

                    b.HasIndex("SuspiciousDomainId");

                    b.HasIndex("SuspiciousEmailId");

                    b.ToTable("UserReports");
                });

            modelBuilder.Entity("BloomFilter.Entity.Concrete.UserReport", b =>
                {
                    b.HasOne("BloomFilter.Entity.Concrete.SuspiciousDomain", "SuspiciousDomain")
                        .WithMany("UserReports")
                        .HasForeignKey("SuspiciousDomainId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BloomFilter.Entity.Concrete.SuspiciousEmail", "SuspiciousEmail")
                        .WithMany("UserReports")
                        .HasForeignKey("SuspiciousEmailId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SuspiciousDomain");

                    b.Navigation("SuspiciousEmail");
                });

            modelBuilder.Entity("BloomFilter.Entity.Concrete.SuspiciousDomain", b =>
                {
                    b.Navigation("UserReports");
                });

            modelBuilder.Entity("BloomFilter.Entity.Concrete.SuspiciousEmail", b =>
                {
                    b.Navigation("UserReports");
                });
#pragma warning restore 612, 618
        }
    }
}
